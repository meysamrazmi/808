<?php

/**
 * Implements hook_services_resources().
 */

function custom_services_services_resources(){
	return array(
        'versions' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'Return all app versions data',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'version_data_resource'),
                    'callback' => 'version_data_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'type',
                            'type' => 'string',
                            'description' => 'The type of this version.',
                            'source' => array('param' => 'type'),
                            'optional' => True,
                            'default' => '',
                        ),
                        array(
                            'name' => 'vid',
                            'type' => 'string',
                            'description' => 'The version id.',
                            'source' => array('param' => 'vid'),
                            'optional' => True,
                            'default' => '',
                        ),
                    ),
                ),
                'retrieve' => array(
                    'help' => 'Return data of this version',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'version_data_resource'),
                    'callback' => 'version_service_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'vid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The vid of versions',
                        ),
                        array(
                            'name' => 'type',
                            'type' => 'string',
                            'description' => 'The type of this version.',
                            'source' => array('param' => 'type'),
                            'optional' => False,
                        ),
                    ),
                ),
                'create' => array(
                    'help' => 'Insert data of new version',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'version_data_resource'),
                    'callback' => 'version_service_resource_create',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The hash of url.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'update' => array(
                    'help' => 'Update data of a version',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'version_data_resource'),
                    'callback' => 'version_service_resource_update',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'vid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The vid of the version to update',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The hash of url.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
            ),
        ),
        'question' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'return all the questions',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'retrieve' => array(
                    'help' => 'Retrieve a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the question to retrieve',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'create' => array(
                    'help' => 'Create a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_create',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'update' => array(
                    'help' => 'Update a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_update',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the question to update',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
            ),
            'actions' => array(

            ),
            'targeted_actions' => array(
                'follow' => array(
                    'help' => 'Follow a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_follow',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the question to follow',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'Data of request',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                    ),
                ),
                'vote' => array(
                    'help' => 'Vote a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_vote',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the question to vote',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'Vote up or down',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                    ),
                ),
            ),
            'relationships' => array(
                'comment' => array(
                    'help' => 'comments of a question',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_question_comments',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'nid of question for getting comments',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
                'search' => array(
                    'help' => 'Search in Questions',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_search',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'list',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'Used for url address',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
                'expert' => array(
                    'help' => 'List of experts that are used in questions',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),
                    'callback' => 'question_resource_experts_list',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'list',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'Used for url address',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                )
            ),
        ),
		'comments' => array(
		    'operations' => array(
		        'create' => array(
                    'help' => 'create a comment',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'comment_resource'),
                    'callback' => 'comment_resource_create',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data for create',
                            'source' => 'data',
                            'optional' => FALSE,
                        )
                    ),
                ),
                'update' => array(
                    'help' => 'update a comment',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'comment_resource'),
                    'callback' => 'comment_resource_update',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'cid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The cid of the comment to for edit',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data for update',
                            'source' => 'data',
                            'optional' => FALSE,
                        )
                    ),
                ),
            ),
            'targeted_actions' => array(
                'vote' => array(
                    'help' => 'Vote a comment',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'comment_resource'),
                    'callback' => 'comment_resource_vote',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'cid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the question to vote',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'Vote up or down',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                    ),
                ),
                'prove' => array(
                    'help' => 'prove a comment by advisor or asker',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'comment_resource'),
                    'callback' => 'comment_resource_prove',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'cid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The cid of the comment to for prove',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The prove action',
                            'source' => 'data',
                            'optional' => True,
                        )
                    ),
                ),
            ),
        ),
		'pedia' => array(
		    'operations' => array(
		        'index' => array(
                    'help' => 'return all pedia',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),
                    'callback' => 'pedia_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
		        'retrieve' => array(
                    'help' => 'Retrieve a pedia',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),
                    'callback' => 'pedia_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'tid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The tid of the pedia to retrieve',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
		    'relationships' => array(
		        'search' => array(
                    'help' => 'Search in pedias',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),
                    'callback' => 'pedia_resource_search',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'list',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'Used for url address',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
		'news' => array(
		    'operations' => array(
                'index' => array(
                    'help' => 'return the news',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'news_resource'),
                    'callback' => 'news_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'domain',
                            'type' => 'string',
                            'description' => 'The domain of list.',
                            'source' => array('param' => 'domain'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'page',
                            'type' => 'int',
                            'description' => 'The page of list.',
                            'source' => array('param' => 'page'),
                            'optional' => TRUE,
                            'default value' => 0,
                        ),

                        array(
                            'name' => 'version',
                            'type' => 'int',
                            'description' => 'The version of app.',
                            'source' => array('param' => 'version'),
                            'optional' => TRUE,
                            'default value' => 0,
                        ),
                    ),
                ),
                'retrieve' => array(
                'help' => 'Retrieve a news',
                'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'news_resource'),
                'callback' => 'news_resource_retrieve',
                'access callback' => 'user_access',
                'access arguments' => array('access content'),
                'access arguments append' => FALSE,
                'args' => array(
                    array(
                        'name' => 'hash',
                        'type' => 'string',
                        'description' => 'The hash of url.',
                        'source' => array('param' => 'hash'),
                        'optional' => False,
                    ),
                    array(
                        'name' => 'nid',
                        'optional' => FALSE,
                        'source' => array('path' => 0),
                        'type' => 'int',
                        'description' => 'The nid of the pedia to retrieve',
                    ),
                    array(
                        'name' => 'version',
                        'type' => 'int',
                        'description' => 'The version of app.',
                        'source' => array('param' => 'version'),
                        'optional' => TRUE,
                        'default value' => 0,
                    ),
                ),
            ),
            ),
        ),
        'user' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Retrieve profile data',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'uid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The uid of the user to retrieve',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'update' => array(
                    'help' => 'Update a user',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_update',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'uid',
                            'type' => 'int',
                            'description' => 'Unique identifier for this user',
                            'source' => array('path' => 0),
                            'optional' => FALSE,
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The user object with updated information',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                    ),
                ),
            ),
            'actions' => array(
                'login2' => array(
                    'help' => 'Login a user for a new session',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_login',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'register2' => array(
                    'help' => 'Create a new user',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_register',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'New user data',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                    ),
                ),
                'exist' => array(
                    'help' => 'Check user is exist or not!',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_exist',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('data' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'User data',
                            'source' => 'data',
                            'optional' => FALSE,
                        ),
                        array(
                            'name' => 'version',
                            'type' => 'int',
                            'description' => 'The version of app.',
                            'source' => array('data' => 'version'),
                            'optional' => TRUE,
                            'default value' => 0,
                        ),
                    ),
                ),
                'phoneToken' => array(
                    'help' => 'Get the token of user`s phone for sending notification',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_phone_token',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                )
            ),
            'targeted_actions' => array(),
            'relationships' => array(
                'purchased_products' => array(
                    'help' => 'list of product that the user bought',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_purchased_products_list',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'uid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The uid of the user for getting list',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
                'bookmarks' => array(
                    'help' => 'list of content that the user bookmarks.',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_bookmark_contents_list',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'uid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The uid of the user for getting list',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
                'verify' => array(
                    'help' => 'check if user is login or not',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),
                    'callback' => 'user_resource_login_check',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'url',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'The url for request',
                            'default' => 'session'
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameters of request',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
            ),
        ),
        'content' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'return custom content list',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'type',
                            'type' => 'string',
                            'description' => 'The type of product.',
                            'source' => array('param' => 'type'),
                            'optional' => True,
                            'default value' => ""
                        ),
                        array(
                            'name' => 'page',
                            'type' => 'int',
                            'description' => 'The page of list.',
                            'source' => array('param' => 'page'),
                            'optional' => TRUE,
                            'default value' => 0,
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'retrieve' => array(
                    'help' => 'return a content data',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'nid',
                            'type' => 'string',
                            'description' => 'The type of product.',
                            'source' => array('path' => 0),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The version of app.',
                            'source' => array('param' => 'parameter'),
                            'optional' => TRUE,
                            'default value' => array(),
                        ),
                    ),
                ),
                'create' => array(),
            ),
            'actions' => array(
                'search' => array(
                    'help' => 'Search in E-Books',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_search_previous',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'hash',
                            'type' => 'string',
                            'description' => 'The hash of url.',
                            'source' => array('data' => 'hash'),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'type',
                            'type' => 'string',
                            'description' => 'type of content',
                            'source' => array('data' => 'type'),
                            'optional' => FALSE,
                        ),
                        array(
                            'name' => 'value',
                            'type' => 'string',
                            'description' => 'a value that used for search',
                            'source' => array('data' => 'value'),
                            'optional' => FALSE,
                        ),
                        array(
                            'name' => 'version',
                            'type' => 'int',
                            'description' => 'The version of app.',
                            'source' => array('data' => 'version'),
                            'optional' => TRUE,
                            'default value' => 0,
                        ),
                    ),
                ),
            ),
            'targeted_actions' => array(
                'bookmark' => array(
                    'help' => 'bookmark a content',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'bookmark_content',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the node to for bookmark',
                        ),
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'Bookmark or un-bookmark a content',
                            'source' => 'data',
                            'optional' => FALSE,
                        )
                    ),
                ),
            ),
            'relationships' => array(
                'search' => array(
                    'help' => 'Search in contents',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_search',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'list',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'Used for url address',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'type' => array(
                    'help' => 'Get the type of the content',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_content_type',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'nid of content',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'suggestion' => array(
                    'help' => 'return the contents that is related to the user purchased',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'content_resource'),
                    'callback' => 'content_resource_suggestion_content_to_user',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'list',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'use for url'
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
        'payment' => array(
            'actions' => array(
                'pre_payment' => array(
                    'help' => 'request before payment in app',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'payment_resource'),
                    'callback' => 'payment_resource_pre_payment',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(

                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data for transaction',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'final_payment' => array(
                    'help' => 'request for verify payment in app',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'payment_resource'),
                    'callback' => 'payment_resource_final_payment',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data for transaction',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
            ),
            'relationships' => array(
                'status' => array(
                    'help' => 'request for status of the transaction',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'payment_resource'),
                    'callback' => 'payment_resource_get_status',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'id',
                            'type' => 'int',
                            'description' => 'The id of transaction',
                            'source' => array('path' => 0),
                            'optional' => False,
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
		'order' => array(
            'actions' => array(
                'by_user_point' => array(
                    'help' => 'make order by user point',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'order_resource'),
                    'callback' => 'make_order_by_user_point',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The type of order',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
            ),
        ),
        'taxonomy' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'get list of taxonomies',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'taxonomy_resource'),
                    'callback' => 'taxonomy_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'retrieve' => array(
                    'help' => 'return data of a  taxonomy',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'taxonomy_resource'),
                    'callback' => 'taxonomy_resource_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'tid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The tid of the taxonomy to retrieve',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
        'festival' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'send festival data to app',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'festival_resource'),
                    'callback' => 'festival_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
        'contactus' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'send about us information',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'contact_us_resource'),
                    'callback' => 'contact_us_resource_index',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),


        /*------------------------------------------------------------------------------------------*/
        /* pre-request is used for remote login
         * agent should send pre request and received token for authorization
         * agent should used his own merchant id for access
         * we use get method because of different origins can access
         */
        'prerequest' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Return a token for authorization',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'remote_login_resource'),
                    'callback' => 'remote_login_resource_pre_request',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'merchant',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'The merchant id of agent',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
        /* post-request is used for remote login
         * agent should send post request and received user's information
         * agent should used user's token for access
         * we use get method because of different origins can access
         */
        'postrequest' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Return user`s data',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'remote_login_resource'),
                    'callback' => 'remote_login_resource_post_request',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'merchant',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'string',
                            'description' => 'The merchant id of agent',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
            ),
        ),
        /*------------------------------------------------------------------------------------------*/
        /*------------------------------------------------------------------------------------------*/
        /*
         * create, update, retrieve, delete, index info about the films that are encrypted
         * used in desktop lock application
         * */
        'encrypted_film' => array(
            'operations' => array(
                'index' => array(),
                'retrieve' => array(),
                'create' => array(
                    'help' => 'Create a record for encrypted film',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'desktop_resource'),
                    'callback' => 'encrypted_film_create',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'update' => array(),
                'delete' => array(),
            ),
            'action' => array(),
            'target_action' => array(),
            'relationships' => array(),
        ),
        'system_info' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Return data of system of this ID',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'desktop_resource'),
                    'callback' => 'system_info_retrieve',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'id',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The id of system',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                    ),
                ),
                'create' => array(
                    'help' => 'Insert information of the user`s system',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'desktop_resource'),
                    'callback' => 'system_info_create',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'data',
                            'type' => 'array',
                            'description' => 'The data of request.',
                            'source' => 'data',
                            'optional' => False,
                        ),
                    ),
                ),
                'delete' => array(
                    'help' => 'Delete the data of system of this ID',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'desktop_resource'),
                    'callback' => 'system_info_delete',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'id',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The id of system',
                        ),
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The parameter of api.',
                            'source' => array('param' => 'parameter'),
                            'optional' => True,
                            'default value' => array()
                        ),
                )
            ),
            ),
            'action' => array(),
            'target_action' => array(),
            'relationships' => array(),
        ),
        /*------------------------------------------------------------------------------------------*/

		'advisorlist' => array(
			'operations' => array(
				'index' => array(
					'help' => 'get list of advisor users',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'advisor_list',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE
				)
			),
            'actions' => array(
                'info' => array(
                    'help' => 'return list of advisors',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'advisors_info',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'page',
                            'optional' => TRUE,
                            'type' => 'int',
                            'description' => 'The zero-based index of the page to get, defaults to 0.',
                            'default value' => 0,
                            'source' => array('data' => 'page'),
                        )
                    )
                ),
            ),
		),
        'taxonomy_term' => array(
            'relationships' => array(
                'information' => array(
                    'help' => 'get expert information',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'taxonomy_information',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'tid',
                            'optional' => False,
                            'type' => 'int',
                            'description' => 'tid',
                            'source' => array('path' => 0),
                        )
                    )
                ),
            ),
        ),
		'node' => array(
			'actions' => array(
				'all_questions' => array(
					'help' => 'get all questions',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'get_questions',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
						  'name' => 'url',
						  'optional' => TRUE,
						  'type' => 'string',
						  'description' => 'url',
						  'source' => array('data' => 'url'),
						  'default value' => "all_questions",
						),
						array(
							'name' => 'page',
							'optional' => TRUE,
							'type' => 'int',
							'description' => 'The zero-based index of the page to get, defaults to 0.',
							'default value' => 0,
							'source' => array('data' => 'page'),
						)
					)
				),
				'my_questions' => array(
					'help' => 'get users questions',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'get_questions',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
						  'name' => 'url',
						  'optional' => TRUE,
						  'type' => 'string',
						  'description' => 'url',
						  'source' => array('data' => 'url'),
						  'default value' => "my_questions",
						),
						array(
							'name' => 'page',
							'optional' => TRUE,
							'type' => 'int',
							'description' => 'The zero-based index of the page to get, defaults to 0.',
							'default value' => 0,
							'source' => array('data' => 'page'),
						)
					)
				),
				'following_questions' => array(
					'help' => 'get user following questions',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'get_questions',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
						  'name' => 'url',
						  'optional' => TRUE,
						  'type' => 'string',
						  'description' => 'url',
						  'source' => array('data' => 'url'),
						  'default value' => "following_questions",
						),
						array(
							'name' => 'page',
							'optional' => TRUE,
							'type' => 'int',
							'description' => 'The zero-based index of the page to get, defaults to 0.',
							'default value' => 0,
							'source' => array('data' => 'page'),
						)
					)
				),
				'my_experts_questions' => array(
					'help' => 'get related to user experts questions',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'get_questions',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
						  'name' => 'url',
						  'optional' => TRUE,
						  'type' => 'string',
						  'description' => 'url',
						  'source' => array('data' => 'url'),
						  'default value' => "my_experts_questions",
						),
						array(
							'name' => 'page',
							'optional' => TRUE,
							'type' => 'int',
							'description' => 'The zero-based index of the page to get, defaults to 0.',
							'default value' => 0,
							'source' => array('data' => 'page'),
						)
					)
				),
                'my_answered_questions' => array(
                    'help' => 'get related to user experts questions',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'my_answered_questions',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'page',
                            'optional' => TRUE,
                            'type' => 'int',
                            'description' => 'The zero-based index of the page to get, defaults to 0.',
                            'default value' => 0,
                            'source' => array('data' => 'page'),
                        )
                    )
                ),
				'pedia' => array(
					'help' => 'get all pedia',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'get_pedia',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'page',
							'optional' => TRUE,
							'type' => 'int',
							'description' => 'The zero-based index of the page to get, defaults to 0.',
							'default value' => 0,
							'source' => array('data' => 'page'),
						)
					)
				),
			),
			
			'targeted_actions' => array(
				'edit' => array(
					'help' => 'edit a node',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'node_edit',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'nid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The nid of the node to for edit',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The question object with updated information',
							'source' => 'data',
							'optional' => FALSE,
						)
					),
				),
				
				'follow' => array(
					'help' => 'followand unfollow',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'follow_unfollow',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'nid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The nid of the node to for follow',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The question object with updated information',
							'source' => 'data',
							'optional' => FALSE,
						)
					),
				),
				
				'vote' => array(
					'help' => 'question vote up and down',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'question_vote_up_down',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'nid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The nid of the node to for vote',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The question object with updated information',
							'source' => 'data',
							'optional' => FALSE,
						)
					),
				),
			),

            'relationships' => array(
                'pedia_advisor' => array(
                    'help' => 'advisors of a pedia',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'pedia_advisor',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args'     => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the pedia that we are getting its advisors',
                        ),
                    ),
                ),
            ),
		),
		'comment' => array(
			'targeted_actions' => array(
				'edit' => array(
					'help' => 'edit a comment',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'comment_edit',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'cid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The cid of the comment to for edit',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The vote action',
							'source' => 'data',
							'optional' => FALSE,
						)
					),
				),
				
				'vote' => array(
					'help' => 'comment vote up and down',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'comment_vote_up_down',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'cid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The cid of the comment to for vote',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The vote action',
							'source' => 'data',
							'optional' => FALSE,
						)
					),
				),
				
				'prove_advisor' => array(
					'help' => 'prove a comment by advisor',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'comment_prove_by_advisor',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'cid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The cid of the comment to for prove',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The prove action',
							'source' => 'data',
							'optional' => True,
						)
					),
				),
				
				'prove_asker' => array(
					'help' => 'prove a comment by asker',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'comment_prove_by_asker',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE,
					'args' => array(
						array(
							'name' => 'cid',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The cid of the comment to for prove',
						),
						array(
							'name' => 'data',
							'type' => 'array',
							'description' => 'The prove action',
							'source' => 'data',
							'optional' => True,
						)
					),
				),
			),
		),
		'slideshow' => array(
			'operations' => array(
				'index' => array(
					'help' => 'get slideshow items of saze page',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'slideshow_items',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE
				)
			)
		),
		'calendar' => array(
			'operations' => array(
				'index' => array(
					'help' => 'get calendar items of front page',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'calendar_items',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE
				)
			)
		),
		'front_news' => array(
			'operations' => array(
				'index' => array(
					'help' => 'get front_news items',
					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
					'callback' => 'front_news_items',
					'access callback' => 'user_access',
					'access arguments' => array('access content'),
					'access arguments append' => FALSE
				)
			)
		),
        'file' => array(
            'operations' => array(
                'delete' => array(
                    'help' => 'Delete a file',
                    'callback' => 'file_delete',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'fid',
                            'type' => 'int',
                            'description' => 'The id of the file to delete',
                            'source' => array('path' => '0'),
                            'optional' => FALSE,
                        ),
                    ),
                ),
            ),
            'actions' => array(
                'create_file' => array(
                    'help' => 'Create a file with raw data.',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'create_file',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                ),
                'upload' => array(
                    'help' => 'Upload a file with raw data.',
                    'callback' => 'upload_file',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'parameter',
                            'type' => 'array',
                            'description' => 'The hash of url.',
                            'source' => array('param' => 'parameter'),
                            'optional' => False,
                        ),
                    ),
                ),
            ),
        ),
        'pbd' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'insert email for latin site',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'latin_insert_email',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'email',
                            'optional' => False,
                            'type' => 'string',
                            'description' => 'the user email',
                            'source' => array('param' => 'email'),
                        ),
                    ),
                ),
            ),
            'actions' => array(
                'insert_mail' => array(
                    'help' => 'insert email for latin site',
                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),
                    'callback' => 'latin_insert_email',
                    'access callback' => 'user_access',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'email',
                            'optional' => False,
                            'type' => 'string',
                            'description' => 'the user email',
                            'source' => array('data' => 'email'),
                        ),
                    ),
                ),
            ),
        ),
	);
}

function custom_services_form_alter(&$form, &$form_state, &$form_id){
    if($form_id == "user_register_form"){
        $path = arg(0);
        if(strcmp($path, "android") == 0){
            unset($form['captcha']);
        }
    }
}
function user_information($uids = array()){
    $query = db_select('users' , 'u');
    $query->leftJoin('file_managed' , 'f' , 'u.picture = f.fid');
    $query->fields('u' , array('uid' , 'name' , 'mail'));
    $query->addField('f' , 'uri' , 'picture');
    if(!empty($uids)) $query->condition('u.uid', $uids, 'IN');
    $result = $query->execute()->fetchAll();
    return $result;
}

/*-------------------------------file part-------------------------------------------------*/
function upload_file($parameter) {
    if(!isset($parameter["hash"]) || !(hash_true($parameter["hash"] , "file"))) return services_error(t('Failed to access'), 10);
    global $user;
    if($user == 0) return services_error(t('You should login!'), 13);
    $files =  $_FILES;
    foreach ($files as $file_name => $file_info){
        $_FILES["files"]["name"][$file_name] = $file_info['name'];
        $_FILES["files"]["tmp_name"][$file_name] = $file_info['tmp_name'];
        $_FILES["files"]["size"][$file_name] = $file_info['size'];
        $_FILES["files"]["error"][$file_name] = $file_info['error'];
    }
    $files = array();
    foreach ($_FILES['files']['name'] as $field_name => $file_name) {
        // Sanitize the user-input file name before saving to the file system.
        $_FILES['files']['name'][$field_name] = _services_file_check_name_extension($file_name);

        $scheme = file_default_scheme();
        // Set file validators: allowed extension
        $validators = array();
        if ($extensions = variable_get('services_allowed_extensions', SERVICES_ALLOWED_EXTENSIONS)) {
            $validators['file_validate_extensions'] = $extensions;
        }
        $file = file_save_upload($field_name, $validators, "$scheme://");

        if (!empty($file->fid)) {
            // Change the file status from temporary to permanent.
            $file->status = FILE_STATUS_PERMANENT;
            file_save($file);

            // Required to be able to reference this file.
            file_usage_add($file, 'services', 'files', $file->fid);

            $files[$field_name] = $file;
        }
        else {
            return services_error(t('An unknown error occured'), 500);
        }
    }
    return $files;
}
function file_delete_api($fid) {
    if ($file = file_load($fid)) {
        file_usage_delete($file, 'services');
        return file_delete($file);
    }
    return FALSE;
}
/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------public functions-------------------------------------------------*/
function hash_true($hash , $resource){
    $new_hash = hash_hmac("sha256" , $resource , "@Civil808Android@Saze808@" , false);
    if(strcmp($hash, $new_hash) == 0) return true;
    return false;
}
function get_compatible_function_name($url, $method, $source_name , $version){
    $query = db_select("api_code_version" , "acv")
        ->fields("acv" , array("last_function"))
        ->condition("url" , $url)
        ->condition("method" , $method)
        ->condition("source_name" , $source_name)
        ->condition("version" , $version , "<=")
        ->orderBy("version" , "DESC")
        ->execute()->fetch();

    if(!empty($query)) return $query->last_function;
    else return "";
}
function add_log($uid , $url , $action , $entity_type = "" , $entity_id = 0 , $app_name , $app_version , $status , $description){
    $log = db_insert("app_log")
        ->fields(array(
            "uid" => $uid,
            "url" => $url,
            "action" => $action,
            "entity_type" => $entity_type,
            "entity_id" => $entity_id,
            "app_name" => $app_name,
            "app_version" => $app_version,
            "status" => $status,
            "description" => $description,
            "created" => REQUEST_TIME
        ))->execute();

    return $log;
}
function generate_file_address($url){
    $url = substr($url , 8);
    $url = "https://civil808.com/sites/default/files" . $url;
    return $url;
}
function push_notification($data , $uid){
    if(empty($uid)) return false;
    if((!isset($data["type"]) && empty($data["type"])) || (!isset($data["nid"]) && empty($data["nid"]))){
        $data["type"] = "";
        $data["nid"] = "";
    }
    $data["playsound"] = true;
    $data["timestamp"] = REQUEST_TIME;

    $query = db_select("app_notification_token" , "token");
    $query->fields("token" , array("token"));
    $query->condition("token.uid" , $uid , "IN");
    $tokens = $query->execute()->fetchCol();
    if(empty($tokens)) return false;

    $service_url = "https://fcm.googleapis.com/fcm/send";
    $post_data = array(
        "data" => $data,
        "registration_ids" => $tokens
    );
    $post_data = json_encode($post_data);
    $curl = curl_init($service_url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);
    curl_setopt($curl, CURLOPT_HTTPHEADER, array(
            'Content-Type:application/json' ,
            'Authorization:key=AAAALnpKK78:APA91bGyZg-Gj_J0luz_4E4ZOXApm6SRmOuwYz6M5ZeOXJ-EoPNE7cAdhyV6tqSeET6zQSltiGBQvMuLTB_RvtD7yA4Z1n59Dn0leBHu3XeTSvHHmT-NEUmDjENaJX_MMjDArwfvFNqD'
        ));
    curl_setopt($curl, CURLOPT_VERBOSE, true);
    $response = curl_exec($curl);
    curl_close($curl);
    $response = json_decode($response);
    return $response;
}

/*---------------festival setting---------------*/
function festivals(){
    $setting = array();

    /*publication*/
    $setting["publication"]["festival"] = false; //true of false
    $setting["publication"]["percent"] = 0.3; // 100% discount is equal to 1, just determine amount of discount in decimal
    $setting["publication"]["message"] = "۳۰% تخفیف جشنواره"; //use short sentence, just change the amount of discount

    /*college*/
    $setting["college"]["festival"] = false;
    $setting["college"]["percent"] = 0.3;
    $setting["college"]["message"] = "۳۰% تخفیف جشنواره";

    /*product_kit*/
    $setting["product_kit"]["festival"] = false;
    $setting["product_kit"]["percent"] = 0.3;
    $setting["product_kit"]["message"] = "۳۰% تخفیف جشنواره";

    /*free_charge*/
    $setting["free_charge"]["price"] = 0.05; // 1 is equal to 100% extra charging
    /** for free charging message check festival_resource.inc, festival_information_v_1() function **/

    return $setting;
}
/*-------------------------------------------------------------------------------------------------*/