<?php

/**
 * Implements hook_menu().
 */
function custom808_menu(){
    $items = array();
    /*list of api functions that is used for versions*/
    $items['admin/structure/services/apiversion'] = array(
        'title' => t('api versions list'),
        'description' => t('Get the list of api versions'),
        'page callback' => 'api_version_lists',
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );
    /*add and api function that is used for versions*/
    $items['admin/structure/services/apiversion/add'] = array(
        'title' => t('add api versions'),
        'description' => t('Add api versions'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('add_api_version_form'),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );
    /*Edit and api function that is used for versions*/
    $items['admin/structure/services/apiversion/edit/%'] = array(
        'title' => t('edit api versions'),
        'description' => t('Update api versions'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('add_api_version_form' , 5),
        'access arguments' => array('administer modules'),
        'type' => MENU_CALLBACK,
        'file' => 'custom808.inc',
    );
    /*Delete and api function that is used for versions*/
    $items['admin/structure/services/apiversion/delete/%'] = array(
        'title' => t('edit api versions'),
        'description' => t('Update api versions'),
        'page callback' => 'api_version_delete',
        'page arguments' => array(5),
        'access arguments' => array('administer modules'),
        'type' => MENU_CALLBACK,
        'file' => 'custom808.inc',
    );
    /*Admin page for sending notification for android app*/
    $items['admin/structure/services/notification/push'] = array(
        'title' => t('push notification'),
        'description' => t('Send notification to app'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('push_notification_form'),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );
    /*It is used for locked films for each node*/
    $items['node/%/locked'] = array(
        'title' => t('locked film list'),
        'description' => t('Update node encrypted film'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('node_lock_form' , 1),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
        'weight' => 50,
    );
    /*It is used for the admin page to show the applications logs*/
    $items['admin/structure/services/log'] = array(
        'title' => t('logs'),
        'description' => t('Get the list of api versions'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('log_form'),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );

    $items["admin/structure/services/notification/sent"] = array(
        'title' => t('Sent notifications'),
        'description' => t('Sent notifications message'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('sent_notification_table_form'),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );

    return $items;
}

/**
 * Implements hook_menu_alter().
 */
function custom808_menu_alter(&$items)
{
    $items['taxonomy/term/%taxonomy_term']['file path'] = drupal_get_path('module', 'custom808');
    $items['taxonomy/term/%taxonomy_term']['file'] = 'custom808.inc';
}

/**
 * Implements hook_theme().
 */
function custom808_theme() {
	return array(
	);
}

/**
 * Implements hook_theme_registry_alter().
 */
function custom808_theme_registry_alter(&$theme_registry) {
	if (isset($theme_registry['image_formatter'])) {
		$theme_registry['image_formatter']['function'] = 'theme_copy_lazy_image_formatter';
	}
}

function theme_copy_lazy_image_formatter($variables) {
	$item = $variables['item'];
	$image = array(
		'path' => $item['uri'],
	);

	if (array_key_exists('alt', $item)) {
		$image['alt'] = $item['alt'];
	}
	if (isset($item['attributes'])) {
		$image['attributes'] = $item['attributes'];
	}
	if (isset($item['width']) && isset($item['height'])) {
		$image['width'] = $item['width'];
		$image['height'] = $item['height'];
	}

	// Do not output an empty 'title' attribute.
	if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
		$image['title'] = $item['title'];
	}
	if ($variables['image_style']) {
		$image['style_name'] = $variables['image_style'];

		// Determine the dimensions of the styled image.
		$dimensions = array(
			'width' => $image['width'],
			'height' => $image['height'],
		);
		image_style_transform_dimensions($image['style_name'], $dimensions);
		$image['width'] = $dimensions['width'];
		$image['height'] = $dimensions['height'];

		// Determine the URL for the styled image.
		$image['path'] = image_style_url($image['style_name'], $image['path']);

		$attributes = isset($item['attributes'])? $image['attributes'] : [];
		$attributes['data-src'] = file_create_url($image['path']);
		foreach (array(
			         'width',
			         'height',
			         'alt',
			         'title',
		         ) as $key) {
			if (isset($image[$key])) {
				$attributes[$key] = $image[$key];
			}
		}
		$output = '<img' . drupal_attributes($attributes) . ' class="lazy" />';
	}
	else {
		$attributes = isset($item['attributes'])? $image['attributes'] : [];
		$attributes['data-src'] = file_create_url($image['path']);
		foreach (array(
			         'width',
			         'height',
			         'alt',
			         'title',
		         ) as $key) {
			if (isset($image[$key])) {
				$attributes[$key] = $image[$key];
			}
		}
		$output = '<img' . drupal_attributes($attributes) . ' class="lazy" />';
	}

	// The link path and link options are both optional, but for the options to be
	// processed, the link path must at least be an empty string.
	if (isset($variables['path']['path'])) {
		$path = $variables['path']['path'];
		$options = isset($variables['path']['options']) ? $variables['path']['options'] : array();

		// When displaying an image inside a link, the html option must be TRUE.
		$options['html'] = TRUE;
		$output = l($output, $path, $options);
	}
	return $output;
}

function custom808_cron(){
    /**
     * find the questions that have not any response
     * and send private message to the related advisors
     */
    /*-------------------------------------------------------*/
    $query = db_select("node" , "node");
    $query->fields("node" , array("nid"));
    $query->condition("node.type" , "questions")->condition("node.status" , 1);
    $and_1 = db_and()->condition("node.changed" , strtotime('-5 hour -50 minutes', REQUEST_TIME) , ">");
    $and_2 = db_and()->condition("node.changed" , strtotime('-5 day -5 hour -50 minutes', REQUEST_TIME) , ">")->condition("node.changed" , strtotime('-5 day', REQUEST_TIME) , "<");
    $query->condition(db_or()->condition($and_1)->condition($and_2));
    $questions = $query->execute()->fetchCol(); //all the questions' nid between specific time
    if(empty($questions)) return;
    $query = db_select("comment" , "comment")->distinct();
    $query->join("node" , "node" , "node.nid = comment.nid and node.type = 'questions' and node.status = '1' ");
    $query->fields("comment" , array("nid"));
    $query->condition("comment.status" , 1);
    $comments = $query->execute()->fetchCol(); //all questions' nid that have response
    if(empty($comments)) return;
    $nids = array_diff($questions , $comments);
    $nids = array_unique($nids);
    /*find the related advisors and send private message */
    foreach ($nids as $nid){
        $query = db_select("field_data_field_experts" , "q_experts");
        $query->join("field_data_field_experts" , "u_experts" , "q_experts.field_experts_tid = u_experts.field_experts_tid");
        $query->join("profile" , "profile" , "u_experts.entity_id = profile.pid and profile.type = 'main' ");
        $query->join("users" , "user" , "profile.uid = user.uid");
        $query->join("users_roles" , "u_role" , "u_role.uid = user.uid and u_role.rid = '10' ");
        $query->condition("q_experts.entity_id" , $nid)->condition("q_experts.entity_type" , "node")->condition("q_experts.bundle" , "questions");
        $query->condition("u_experts.entity_type" , "profile2")->condition("u_experts.bundle" , "main");
        $query->fields("user" , array("uid"));
        $uids = $query->execute()->fetchCol();
        $uids = array_unique($uids);

        $node = db_select("node")->fields("node" , array("nid" , "title"))->condition("nid" , $nid)->execute()->fetch();
        $message = '<p>مشاور محترم، سوال زیر که مرتبط با تخصص شما است، در سیستم پرسش و پاسخ سایت 808 توسط کاربران ثبت شده است.</p><p>" ' . $node->title .' "<br>برای مشاهده کامل سوال و پاسخ به آن از لینک زیر وارد شوید :<br><a href="/node/' . $node->nid . '" style="text-decoration: none;">پاسخ به سوال</a><br>با تشکر از همکاری شما</p>';
        foreach($uids as $uid){
            send_pm($uid , $message);
//            simple_mail_send("info@civil808.com", $mail, "سوالی مرتبط با تخصص شما در سایت 808 پرسیده شده است.", $message);
        }
    }
    /*----------------------------------------------------*/
}

/**
 * Implements hook_insert().
 * hook_insert is in node.api.php
 * @param $node
 *   The node that is being updated.
 */
function custom808_node_insert($node) {
    /*
     * this part is for SKU model and Stock table
     * if the node does not have stock we insert a de-active record if uc_product_stock
     * */
    if($node->type == "product"){
        $query = db_select("uc_product_stock" , "stock")->distinct();
        $query->fields("stock" , array("nid"));
        $query->condition("stock.nid" , $node->nid);
        $stocks = $query->execute()->fetchCol();
        if(empty($stocks)){
            $query = db_insert('uc_product_stock')->fields(
                array(
                    "sku" => $node->model,
                    "nid" => $node->nid,
                    "active" => 0,
                    "stock" => 0,
                    "threshold" => 0
                )
            )->execute();
        }
    }
}
/**
 * Implements hook_node_update().
 * hook_node_update is in node.api.php
 * @param $node
 *   The node that is being updated.
 */
function custom808_node_update($node){
    /*
     * this part is for locked files
     * it is updating the fid of locked file for  desktop_lock_encryption table
     * or delete record in desktop_lock_encryption table if the all locked files are deleted from the node
     */
    $files = array();
    if(isset($node->field_locked_files) && isset($node->field_locked_files["und"])) {
        foreach ($node->field_locked_files["und"] as $file){
            $name = explode("." , $file["origname"]);
            array_push($files , array("fid" => $file["fid"] , "name" => $name[0]));
        }
    }
    if(!empty($files)) {
        foreach ($files as $file) {
            db_update("desktop_lock_encryption")->fields(array(
                "fid" => $file["fid"],
                "updated" => REQUEST_TIME
            ))
                ->condition("nid", $node->nid)
                ->condition("fid", $file["fid"] , "<>")
                ->condition("new_name", $file["name"])
                ->execute();
        }
    }
    else{
        db_delete("desktop_lock_encryption")
            ->condition("nid", $node->nid)
            ->execute();
    }

    /*
     * this part is for SKU model and Stock table
     * if the node does not have stock we insert a de-active record if uc_product_stock
     * */
    if($node->type == "product"){
        $query = db_select("uc_product_stock" , "stock")->distinct();
        $query->fields("stock" , array("nid" , "sku"));
        $query->condition("stock.nid" , $node->nid);
        $stocks = $query->execute()->fetchAll();
        /*if there is no stock we insert one*/
        if(empty($stocks)){
            $query = db_insert('uc_product_stock')->fields(
                array(
                    "sku" => $node->model,
                    "nid" => $node->nid,
                    "active" => 0,
                    "stock" => 0,
                    "threshold" => 0
                )
            )->execute();
        }
        /*if there is stock we check that the node model and stock sku be same*/
        else{
            foreach ($stocks as $stock){
                if($node->model != $stock->sku){
                    $query = db_select("uc_product_stock" , "stock")->distinct();
                    $query->fields("stock" , array("nid" , "sku"));
                    $query->condition("stock.nid" , $node->nid);
                    $query->condition("stock.sku" , $node->model);
                    $sku = $query->execute()->fetchAll();

                    /*if this nid have stock that sku != model just update the sku*/
                    if(empty($sku)){
                        db_update("uc_product_stock")
                            ->fields(array("sku" => $node->model))
                            ->condition("nid" , $stock->nid)
                            ->execute();
                    }
                    /*else if there is at least one stock that sku = model delete the wrong sku*/
                    else{
                        db_delete("uc_product_stock")
                            ->condition("nid" , $stock->nid)
                            ->condition("sku" , $stock->sku)
                            ->execute();
                    }
                }
            }
        }
    }
}
/**
 * Implements hook_node_delete().
 * hook_delete is in node.api.php
 * @param $node
 *   The node that is being deleted.
 */
function custom808_node_delete($node) {
    /*
     * delete stock from uc_product_stock table after the node deleted
     * */
    if($node->type == "product"){
        db_delete('uc_product_stock')
            ->condition('nid', $node->nid)
            ->execute();
    }
}
/**
 * Implements hook_node_validate().
 * check that a product has a unique sku-model
 * it is used for admin page for adding or editing a product
 */
function custom808_node_validate($node, $form, &$form_state) {
    /* The model of each product or college should be unique
     * Check it when the node is saving
     */
    if(in_array_r($node->type , uc_product_types()) && isset($node->model)) {
        $query = db_select("uc_products", "products");
        $query->fields("products", array("model"));
        $query->condition("products.model", $node->model);
        if(!empty($node->nid)) $query->condition("products.nid", $node->nid, '<>');
        $result = $query->execute()->fetchCol();
        if (!empty($result) && count($result) > 0) {
            form_set_error('model', t('SKU-Model should be unique.'));
        }
    }
}
/**
 * Implements hook_entity_view_mode_alter().
 */
function custom808_entity_view_mode_alter(&$view_mode, $context) {
    // Only alter the view mode if we are on the test callback.
    //madump($context['entity']->field_college_landing['und'][0]['value']);
    if($context['entity_type'] == 'node' && $context['entity']->type == 'college' && isset($context['entity']->field_college_landing['und'][0]) && $context['entity']->field_college_landing['und'][0]['value'] == 1 && $view_mode == 'full'){
        $view_mode = 'landing';
    }
}

function in_array_r($needle, $haystack, $strict = false) {
	if(!is_array($haystack)) return false;
    foreach ($haystack as $item) {
        if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {
            return true;
        }
    }
    return false;
}

/*
 * this function will send a sms to given phone number
 * @param:
 * 	$to: an array of numbers that message will be sent to
 * 	$message: text message that will be sent to phone numbers
 * @return:
 * 	if there is problem it will returns the error that accured during its proccess
 */
function send_sms($to , $message){
	// turn off the WSDL cache
	ini_set("soap.wsdl_cache_enabled", "0");
	try {
		$user = "9113546642";
		$pass = "2191";
		
		$client = new SoapClient("http://87.107.121.52/post/send.asmx?wsdl");
		
		$getcredit_parameters = array(
			"username"=>$user,
			"password"=>$pass
		);
		$credit = $client->GetCredit($getcredit_parameters)->GetCreditResult;
		if(10000 > $credit){
			$from = 'support@civil808.com';
			$to = 'm.razmi.92@gmail.com';
			$subject="کمبود اعتبار sms";
			$body = "برای ارسال پیام های فروشگاه اعتبار کافی نیست.<br>
			http://onlinepanel.ir/<br>
			اعتبار باقی مانده: " . $credit ."ریال می باشد.";
			simple_mail_send($from, $to, $subject, $body);
		}
		
		$encoding = "UTF-8";//CP1256, CP1252
		$textMessage = iconv($encoding, 'UTF-8//TRANSLIT', $message);
		// if(!is_array($to)){
			// $too = array($to);
			// $to = $too;
		// }
		
		$sendsms_parameters = array(
			'username' => $user,
			'password' => $pass,
			'from' => "50009666666808",
			'to' => $to,
			'text' => $textMessage,
			'isflash' => false, 
			'udh' => "",
			'recId' => array(0),
			'status' => 0
		);
		
		$status = $client->SendSms($sendsms_parameters)->SendSmsResult;

	} catch (SoapFault $ex) {
		echo $ex->faultstring;
	}
}

/*
 * this function returns the oposite translation of given string
 *	@param:
 * 	$string:
 * 	$context:
 * 	$langcode:
 */
function t2($string = "", $context = NULL, $langcode = '') {
  $t = $string;
  if ($string !== "") {
    if ($langcode == "en") {
      $sql = 'SELECT s.source 
        FROM {locales_source} s
        JOIN {locales_target} t ON s.lid = t.lid
        WHERE t.translation = :string';

      $results = db_query($sql, array(':string' => $string));
      foreach ($results as $row) {
        $t = $row->source;
      }
    } 
    else {
      $t = t($string, $context, array('langcode' => $langcode));
    }
  }
  return $t;
}

function formatMoney($number, $fractional=false) { 
    if ($fractional) { 
        $number = sprintf('%.2f', $number); 
    } 
    while (true) { 
        $replaced = preg_replace('/(-?\d+)(\d\d\d)/', '$1,$2', $number); 
        if ($replaced != $number) { 
            $number = $replaced; 
        } else { 
            break; 
        } 
    } 
    return $number; 
}

/*
 * helper function for printing arrays and objects with max level
 *
 * Usage:
	$array = array_map(function ($v){
	    return parse($v, "...", 2);
	    }, $item);
    mdump($array);
 * */
function parse($v, $r, $max_d = 1, $d = 0) {
	if (is_array($v) || is_object($v)) {
		if ($d >= $max_d) {
			return $r;
		} else {
			$d++;
			return array_map(function ($v) use ($max_d, $r,  $d) {
				return parse($v, $r, $max_d, $d);
			}, $v);
		}
	} else {
		return $v;
	}
}

function mdump($var){
	global $user;
	if($user->uid == 3300){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}
function madump($var){
	global $user;
	if($user->uid == 3989){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}
function adump($var){
	global $user;
	if($user->uid == 10628){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}

/*
 * sending system messages to given user
 * @param
 *		$to : user id that we'll send message to
 * 	$message : message text
 */
function send_pm($to, $message){
	privatemsg_new_thread(
		array(user_load($to)),
		t('system events'),
		$message,
		array('author' => user_load(2), 'format' => 'full_html')
	);
}

/*
 * sending system messages to advisors when a question that has experts added or accepted
 * @param
 *		$nid : question id that we'll send message to its experties
 * 	$message : message text
 */
function question_advisors($nid, $message){
	$query = db_select("field_data_field_experts" , "experts");
    $query->fields("experts", array("field_experts_tid"));
    $query->condition("bundle" , "questions")->condition("entity_id", $nid);
    $question_experts = $query->execute()->fetchCol();
	
	//the question has at least one expert 
	if(!empty($question_experts)){
        $query = db_select("field_data_field_experts", "experts");
        $query->join("profile", "profile", "profile.pid = experts.entity_id");
        $query->join("users_roles", "roles", "roles.uid = profile.uid and roles.rid = '10' ");
        $query->join("users", "user", "profile.uid = user.uid");
        $query->fields('user', array('mail'));
        $query->condition("experts.field_experts_tid", $question_experts, "IN")->condition("experts.entity_type" , "profile2")->condition("experts.bundle" , "main");
        $advisors = $query->execute()->fetchCol();
        $advisors = array_unique($advisors);
        foreach($advisors as $mail){
            simple_mail_send("info@civil808.com", $mail, "سوالی مرتبط با تخصص شما در سایت 808 پرسیده شده است.", $message);
        }
	}
}

/*
 * sending system messages to followers when the question has an update
 * @param
 *		$node : question object that we'll send message to its followers
 * 	$comment : comment object that we'll send message to its followers
 */
function question_followers($node, $comment){
	$db_followers = db_select("flagging" , "f");
    $db_followers->fields("f" , array("uid"));
    $db_followers->condition("entity_id" , $node->nid)
                ->condition("fid" , 3) //questions follow flag id
				->condition("uid" , $comment->uid, "<>")
                ->condition("uid" , $node->uid, "<>");
    $followers_uid = $db_followers->execute()->fetchCol();
    if(empty($followers_uid)) return array();

    $query = db_select("users" , "user");
    $query->fields("user" , array("mail"));
    $query->condition("user.uid" , $followers_uid , "IN");
    $followers = $query->execute()->fetchCol();
	return $followers;
}

/*
 * return relative questions information for a node and homepage
 * */
function relative_qa($nid , $type)
{
    /*
     * It's called from homepage
     * return the last five questions nid
     */
    if($nid == 0){
        $query = db_select('node' , 'node');
        $query->fields("node" , array("nid"));
        $query->condition("node.type" , "questions");
        $query->condition("node.status" , 1);
        $query->orderBy("node.nid" , "DESC");
        $query->range(0,5);
        $questions_nid = $query->execute()->fetchCol();
    }
    /*
     * It's called form a node
     * return the last three relative questions nid
     * */
    else{
        $query = db_select("field_data_field_experts" , "this_node");
        $query->join("field_data_field_experts" , "question" , "question.field_experts_tid = this_node.field_experts_tid and question.bundle = 'questions' ");
        $query->join("node" , "node" , "node.nid = question.entity_id and node.status = 1");
        $query->condition("this_node.entity_id" , $nid);
        $query->condition("this_node.bundle" , $type);
        $query->condition("this_node.entity_type" , "node");
        $query->addField("question" , "entity_id" , "nid");
        $query->orderBy("question.entity_id" , "DESC");
        $query->range(0 , 3);
        $questions_nid = $query->execute()->fetchCol();
    }


    if (empty($questions_nid)) return array();

    /*
     * fetch complete information of each question
     * */
    $query = db_select('node' , 'node');
    $query->leftJoin("field_data_body" , "body"  , "body.entity_id = node.nid and body.bundle = 'questions' ");
    $query->fields('node' , array('nid' ,'title' , "uid"));
    $query->addField("body" , "body_value" , "body");
    $query->condition('node.nid' , $questions_nid , 'IN');
    $query->orderBy('node.nid' , 'DESC');
    $questions = $query->execute()->fetchAll();

    /*
     * add count of comments and author information of each question
     * */
    foreach($questions as $row) {
        $query = db_select("comment", "comment");
        $query->fields("comment", array("cid"));
        $query->condition("comment.nid", $row->nid);
        $comment_count = $query->countQuery()->execute()->fetchField();
        $comment_count = (int)$comment_count;
        $row->comment_count = $comment_count;

        $query = db_select("users" , "user");
        $query->leftJoin("file_managed" , "file" , "user.picture = file.fid");
        $query->fields("user" , array("uid" , "name"));
        $query->fields("file" , array("uri"));
        $query->condition("user.uid" , $row->uid);
        $user = $query->execute()->fetch();

        $row->username = $user->name;
        $row->user_picture = (!empty($user->uri))? image_style_url("200x200", $user->uri) : "/sites/all/themes/sara/images/profile2front.jpg";
    }

    return $questions;
}

/*
 * IMPORTANT
 * It's call from display suit code filed
 * Homepage panel
 * and from tpl files
 * */
function relative_qa_render($nid , $type){
    $questions = relative_qa($nid, $type);
    if(!empty($questions)) {
        $output  = '<div class="relative-questions">';
        $output .= '	<div class="title">سوالات مرتبط</div>';
        foreach ($questions as $row) {
            $output .= '<div class="question">';
            $output .= '	<div class="reply"><a href="/node/' . $row->nid . '#answer-question" target="_blank"><span>پاسخ به سوال</span></a></div>';
            $output .= '	<div class="right">';
            $output .= '        <a href="/user/' . $row->uid . '" target="_blank" class="pic" title="' . $row->username . '"><img src="' . $row->user_picture . '" alt="عکس کاربر"></a>';
            $output .= '		<div class="comment-count">' . $row->comment_count .'پاسخ'. '</div>';
            $output .= '	</div>';
            $output .= '	<div class="left">';
            $output .= '        <a href="/node/' . $row->nid . '" target="_blank" class="q-title">' . $row->title . '</a>';
            $output .= '		<div class="body">' . $row->body . '</div>';
            $output .= '	</div>';
            $output .= '</div>';
        }
        $output .= '</div>';

        $output .= '<a href="/question/list" class="btn blue-btn qa-btn" target="_blank">ورود به بخش پرسش و پاسخ</a>';

        return $output;
    }
}


/*------------------Code-BLOCK-functions-----------------------*/
/*
 * It's call from 61 custom block
 * for printing one tag block in left side of all contents
 * */
function block_61_theme($nid){
    $query = db_select("taxonomy_term_data", "term_data");
    $query->join("field_data_field_experts", "field_experts", "field_experts.field_experts_tid = term_data.tid and field_experts.entity_type = 'node' and field_experts.entity_id = '" . $nid . "'");
    $query->join("field_data_field_bool", "field_bool", "field_bool.entity_id = term_data.tid and field_bool.bundle = 'expert' and field_bool.entity_type = 'taxonomy_term' and field_bool.field_bool_value = '1'");
    $query->join("field_data_field_image", "image", "image.entity_id = term_data.tid and image.bundle = 'expert' and image.entity_type = 'taxonomy_term'");
    $query->join("file_managed", "file", "image.field_image_fid = file.fid");
    $query->condition("term_data.description" , '','!=');
    $query->isNotNull('term_data.description');
    $query->fields("term_data", array("name","tid"));
    $query->fields("file", array("uri"));
    $query->fields("image", array("field_image_alt","field_image_title"));
    $query->orderRandom()->range(0,1);
    $contents = $query->execute()->fetch();

    if(!empty($contents)) {
        $contents->uri = image_style_url("thumbnail", $contents->uri);
        echo '<div class="views-row">
          <div class="views-field views-field-field-image">        
            <div class="field-content">
              <a href="/taxonomy/term/' . $contents->tid . '" target="_blank" title="' . $contents->name . '">
                <img width="100" height="93" alt="' . $contents->field_image_alt . '" title="' . $contents->field_image_title . '" src="' . $contents->uri . '">
              </a>
            </div>
          </div>  
          <div class="views-field views-field-title">        
            <span class="field-content">
              <a href="/taxonomy/term/' . $contents->tid . '" target="_blank" title="' . $contents->name . '"> ' . $contents->name . ' </a>
            </span>
          </div>
        </div>';
    }
    else{
        echo '<div class="view-empty">
                <p>هر آنچه در رابطه با یک موضوع تخصصی می خواهید ( فیلم، عکس، مقاله، اخبار و ... )، فقط در یک صفحه</p>
                <a href="/pedia" rel="nofollow">صفحه اصلی دانشنامه</a>
            </div>';
    }
}
/*------------------end-Code-Block-functions-----------------------*/
